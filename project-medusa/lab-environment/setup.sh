#!/bin/bash
set -euo pipefail

# ============================================================================
# MEDUSA Lab Environment - One-Command Setup Script
# ============================================================================
# Purpose: Automated deployment of the complete vulnerable lab environment
# Usage: ./setup.sh
# ============================================================================

# Script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
MAX_WAIT_TIME=180  # Maximum time to wait for services (3 minutes)
HEALTH_CHECK_INTERVAL=5  # Seconds between health checks

# ============================================================================
# Helper Functions
# ============================================================================

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_step() {
    echo -e "\n${CYAN}${BOLD}==>${NC} ${BOLD}$1${NC}"
}

print_banner() {
    echo -e "${CYAN}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                                                               ║"
    echo "║              MEDUSA Healthcare Security Lab                  ║"
    echo "║           Automated Setup & Deployment Script                ║"
    echo "║                                                               ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# ============================================================================
# Prerequisite Checks
# ============================================================================

check_prerequisites() {
    log_step "Checking prerequisites"
    
    local missing_tools=0
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        log_info "Install from: https://docs.docker.com/get-docker/"
        ((missing_tools++))
    else
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        log_success "Docker installed (version $DOCKER_VERSION)"
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose is not installed"
        log_info "Install from: https://docs.docker.com/compose/install/"
        ((missing_tools++))
    else
        if docker compose version &> /dev/null; then
            COMPOSE_VERSION=$(docker compose version --short)
            log_success "Docker Compose installed (version $COMPOSE_VERSION)"
        else
            COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
            log_success "Docker Compose installed (version $COMPOSE_VERSION)"
        fi
    fi
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        log_info "Start Docker Desktop or run: sudo systemctl start docker"
        ((missing_tools++))
    else
        log_success "Docker daemon is running"
    fi
    
    # Check curl for health checks
    if ! command -v curl &> /dev/null; then
        log_warning "curl not found - some health checks may be limited"
    else
        log_success "curl installed"
    fi
    
    if [ $missing_tools -gt 0 ]; then
        log_error "Missing $missing_tools required tool(s). Please install them first."
        exit 1
    fi
    
    log_success "All prerequisites satisfied"
}

# ============================================================================
# Environment Setup
# ============================================================================

setup_environment() {
    log_step "Setting up environment"
    
    # Change to lab-environment directory
    cd "$SCRIPT_DIR"
    
    # Create necessary directories
    log_info "Creating required directories..."
    mkdir -p analysis
    mkdir -p shared-files
    mkdir -p mock-data/medical-records
    mkdir -p mock-data/documents
    
    # Create .env file if it doesn't exist
    if [ ! -f .env ]; then
        log_info "Creating .env file from defaults..."
        cat > .env << 'EOF'
# MEDUSA Lab Environment Configuration
# Auto-generated by setup.sh

# Database
MYSQL_ROOT_PASSWORD=admin123
MYSQL_DATABASE=healthcare_db
MYSQL_USER=ehrapp
MYSQL_PASSWORD=Welcome123!

# Application
APP_ENV=lab
APP_DEBUG=true

# Network
DMZ_SUBNET=172.20.0.0/24
INTERNAL_SUBNET=172.21.0.0/24

# Logging
LOG_LEVEL=DEBUG
EOF
        log_success ".env file created"
    else
        log_success ".env file already exists"
    fi
    
    log_success "Environment setup complete"
}

# ============================================================================
# Docker Image Building
# ============================================================================

build_images() {
    log_step "Building Docker images"
    
    log_info "This may take 5-10 minutes on first run..."
    
    # Build with progress
    if docker-compose build --no-cache 2>&1 | while IFS= read -r line; do
        echo "  $line"
    done; then
        log_success "All images built successfully"
    else
        log_error "Image build failed"
        log_info "Check the output above for errors"
        exit 1
    fi
}

# ============================================================================
# Network Creation
# ============================================================================

create_networks() {
    log_step "Creating Docker networks"
    
    # Docker Compose will create networks automatically, but we verify them
    log_info "Networks will be created by docker-compose..."
    log_info "  • healthcare-dmz (172.20.0.0/24)"
    log_info "  • healthcare-internal (172.21.0.0/24)"
    
    log_success "Network configuration ready"
}

# ============================================================================
# Database Initialization
# ============================================================================

prepare_database() {
    log_step "Preparing database initialization"
    
    if [ -d "init-scripts/db" ]; then
        local script_count=$(ls -1 init-scripts/db/*.sql 2>/dev/null | wc -l)
        if [ "$script_count" -gt 0 ]; then
            log_success "Found $script_count SQL initialization script(s)"
        else
            log_warning "No SQL scripts found in init-scripts/db/"
        fi
    else
        log_warning "init-scripts/db/ directory not found"
    fi
}

# ============================================================================
# Service Startup
# ============================================================================

start_services() {
    log_step "Starting all services"
    
    log_info "Launching 8 vulnerable services..."
    log_info "  1. EHR Web Portal (port 8080)"
    log_info "  2. EHR API (port 3000)"
    log_info "  3. MySQL Database (port 3306)"
    log_info "  4. SSH Server (port 2222)"
    log_info "  5. FTP Server (port 21)"
    log_info "  6. LDAP Server (port 389)"
    log_info "  7. Log Collector (port 8081)"
    log_info "  8. Workstation (ports 445, 3389, 5900)"
    
    if docker-compose up -d 2>&1 | while IFS= read -r line; do
        echo "  $line"
    done; then
        log_success "All services started"
    else
        log_error "Failed to start services"
        exit 1
    fi
}

# ============================================================================
# Health Checks
# ============================================================================

wait_for_services() {
    log_step "Waiting for services to be healthy"
    
    local elapsed=0
    local all_healthy=false
    
    log_info "This may take 30-60 seconds..."
    
    while [ $elapsed -lt $MAX_WAIT_TIME ]; do
        # Count running containers
        local total_containers=$(docker-compose ps -q | wc -l | tr -d ' ')
        local running_containers=$(docker-compose ps | grep -c "Up" || true)
        
        # Show progress
        printf "\r  Checking... (%d/%d containers running) [%ds]" \
            "$running_containers" "$total_containers" "$elapsed"
        
        # Check if all are up
        if [ "$running_containers" -eq "$total_containers" ] && [ "$total_containers" -gt 0 ]; then
            all_healthy=true
            break
        fi
        
        sleep $HEALTH_CHECK_INTERVAL
        elapsed=$((elapsed + HEALTH_CHECK_INTERVAL))
    done
    
    echo ""  # New line after progress indicator
    
    if [ "$all_healthy" = true ]; then
        log_success "All services are running"
    else
        log_warning "Some services may not be fully healthy yet"
        log_info "Run './verify.sh' to check detailed status"
    fi
}

# ============================================================================
# Service Verification
# ============================================================================

verify_services() {
    log_step "Verifying service endpoints"
    
    local failures=0
    
    # Test web app
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200\|302"; then
        log_success "EHR Web Portal responding"
    else
        log_warning "EHR Web Portal not responding yet"
        ((failures++))
    fi
    
    # Test API
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200\|404"; then
        log_success "EHR API responding"
    else
        log_warning "EHR API not responding yet"
        ((failures++))
    fi
    
    # Test log collector
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:8081 | grep -q "200"; then
        log_success "Log Collector responding"
    else
        log_warning "Log Collector not responding yet"
        ((failures++))
    fi
    
    # Test database connection
    if docker-compose exec -T ehr-database mysqladmin ping -h localhost -u root -padmin123 &>/dev/null; then
        log_success "MySQL Database responding"
    else
        log_warning "MySQL Database not responding yet"
        ((failures++))
    fi
    
    # Test SSH port
    if nc -z -w 2 localhost 2222 2>/dev/null || timeout 2 bash -c "echo > /dev/tcp/localhost/2222" 2>/dev/null; then
        log_success "SSH Server listening"
    else
        log_warning "SSH Server not listening yet"
        ((failures++))
    fi
    
    # Test FTP port
    if nc -z -w 2 localhost 21 2>/dev/null || timeout 2 bash -c "echo > /dev/tcp/localhost/21" 2>/dev/null; then
        log_success "FTP Server listening"
    else
        log_warning "FTP Server not listening yet"
        ((failures++))
    fi
    
    # Test LDAP port
    if nc -z -w 2 localhost 389 2>/dev/null || timeout 2 bash -c "echo > /dev/tcp/localhost/389" 2>/dev/null; then
        log_success "LDAP Server listening"
    else
        log_warning "LDAP Server not listening yet"
        ((failures++))
    fi
    
    # Test SMB port (workstation)
    if nc -z -w 2 localhost 445 2>/dev/null || timeout 2 bash -c "echo > /dev/tcp/localhost/445" 2>/dev/null; then
        log_success "Workstation SMB listening"
    else
        log_warning "Workstation not listening yet"
        ((failures++))
    fi
    
    if [ $failures -eq 0 ]; then
        log_success "All service endpoints verified!"
    else
        log_warning "$failures service(s) not responding - they may need more time to initialize"
        log_info "Run './verify.sh' in a minute to recheck"
    fi
}

# ============================================================================
# Display Access Information
# ============================================================================

display_access_info() {
    echo ""
    echo -e "${GREEN}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                                                               ║${NC}"
    echo -e "${GREEN}║            🎯 MEDUSA Lab Successfully Deployed! 🎯             ║${NC}"
    echo -e "${GREEN}║                                                               ║${NC}"
    echo -e "${GREEN}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}${BOLD}Web Interfaces:${NC}"
    echo -e "  ${BOLD}EHR Portal:${NC}     http://localhost:8080"
    echo -e "  ${BOLD}EHR API:${NC}        http://localhost:3000"
    echo -e "  ${BOLD}Log Viewer:${NC}     http://localhost:8081"
    echo ""
    echo -e "${CYAN}${BOLD}Default Credentials:${NC}"
    echo -e "  ${BOLD}Web Login:${NC}      admin / admin123"
    echo -e "  ${BOLD}SSH:${NC}            admin / admin2024"
    echo -e "  ${BOLD}MySQL:${NC}          root / admin123"
    echo -e "  ${BOLD}FTP:${NC}            fileadmin / Files2024!"
    echo -e "  ${BOLD}LDAP:${NC}           cn=admin,dc=medcare,dc=local / admin123"
    echo ""
    echo -e "${CYAN}${BOLD}Connection Commands:${NC}"
    echo -e "  ${BOLD}SSH:${NC}            ssh admin@localhost -p 2222"
    echo -e "  ${BOLD}MySQL:${NC}          mysql -h localhost -P 3306 -u root -padmin123"
    echo -e "  ${BOLD}FTP:${NC}            ftp localhost 21"
    echo ""
    echo -e "${CYAN}${BOLD}Management Commands:${NC}"
    echo -e "  ${BOLD}View logs:${NC}      docker-compose logs -f"
    echo -e "  ${BOLD}Stop lab:${NC}       docker-compose down"
    echo -e "  ${BOLD}Restart:${NC}        docker-compose restart"
    echo -e "  ${BOLD}Verify:${NC}         ./verify.sh"
    echo -e "  ${BOLD}Health check:${NC}   python3 healthcheck.py"
    echo ""
    echo -e "${RED}${BOLD}⚠️  SECURITY WARNING ⚠️${NC}"
    echo -e "${RED}This lab contains INTENTIONAL vulnerabilities!${NC}"
    echo -e "${RED}DO NOT expose these services to the internet!${NC}"
    echo -e "${RED}Use only in isolated environments for testing.${NC}"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo -e "  1. Access the EHR Portal at http://localhost:8080"
    echo -e "  2. Review documentation in /docs/"
    echo -e "  3. Run './verify.sh' to validate all services"
    echo -e "  4. Start testing with the MEDUSA CLI agent"
    echo ""
}

# ============================================================================
# Cleanup on Error
# ============================================================================

cleanup_on_error() {
    log_error "Setup failed - cleaning up..."
    docker-compose down 2>/dev/null || true
    exit 1
}

# ============================================================================
# Main Execution
# ============================================================================

main() {
    # Set up error handling
    trap cleanup_on_error ERR
    
    # Print banner
    print_banner
    
    # Run setup steps
    check_prerequisites
    setup_environment
    build_images
    create_networks
    prepare_database
    start_services
    wait_for_services
    verify_services
    
    # Show access information
    display_access_info
    
    # Success!
    log_success "Setup complete! Lab is ready for testing."
    exit 0
}

# Run main function
main "$@"

